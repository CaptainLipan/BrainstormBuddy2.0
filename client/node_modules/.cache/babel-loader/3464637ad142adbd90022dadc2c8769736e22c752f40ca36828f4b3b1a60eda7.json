{"ast":null,"code":"var _jsxFileName = \"/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx\",\n  _s = $RefreshSig$();\n// CommentSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api'; // Adjust the path as necessary\nimport Comment from './Comment'; // Adjust the path as necessary\n\nimport './Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  postId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]); // Now TypeScript knows what's in the array\n  const [newComment, setNewComment] = useState('');\n  const userId = \"user-id\"; // This should be dynamically set based on logged-in user\n\n  useEffect(() => {\n    loadComments();\n  }, [postId]);\n  const loadComments = async () => {\n    const fetchedComments = await getCommentsForPost(postId);\n    setComments(fetchedComments); // Assuming fetchedComments is already an IComment[]\n  };\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (newComment.trim()) {\n      const comment = await postComment(newComment, postId, userId);\n      setComments([...comments, comment]); // Assuming the response is of type IComment\n      setNewComment('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comments-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment\n    }, comment._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","getCommentsForPost","postComment","Comment","jsxDEV","_jsxDEV","CommentsSection","postId","_s","comments","setComments","newComment","setNewComment","userId","loadComments","fetchedComments","handleCommentSubmit","event","preventDefault","trim","comment","className","children","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","map","_id","_c","$RefreshReg$"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx"],"sourcesContent":["// CommentSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api'; // Adjust the path as necessary\nimport Comment from './Comment'; // Adjust the path as necessary\nimport { IComment } from '../../../models/comment/CommentModel';\nimport './Comment.css'\ninterface CommentsSectionProps {\n    postId: string;\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ postId }) => {\n    const [comments, setComments] = useState<IComment[]>([]);  // Now TypeScript knows what's in the array\n    const [newComment, setNewComment] = useState('');\n    const userId = \"user-id\"; // This should be dynamically set based on logged-in user\n\n    useEffect(() => {\n        loadComments();\n    }, [postId]);\n\n    const loadComments = async () => {\n        const fetchedComments = await getCommentsForPost(postId);\n        setComments(fetchedComments); // Assuming fetchedComments is already an IComment[]\n    };\n\n    const handleCommentSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        if (newComment.trim()) {\n            const comment = await postComment(newComment, postId, userId);\n            setComments([...comments, comment]);  // Assuming the response is of type IComment\n            setNewComment('');\n        }\n    };\n\n    return (\n        <div className=\"comments-section\">\n            <form className=\"comments-form\">\n                <textarea placeholder=\"Add a comment...\"></textarea>\n                <button type=\"submit\">Post Comment</button>\n            </form>\n            {/* Iteration over comments, each wrapped in a Comment component */}\n            {comments.map(comment => (\n                <Comment key={comment._id} comment={comment} />\n            ))}\n        </div>\n    );\n};\n\nexport default CommentsSection;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACpE,OAAOC,OAAO,MAAM,WAAW,CAAC,CAAC;;AAEjC,OAAO,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKtB,MAAMC,eAA+C,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAa,EAAE,CAAC,CAAC,CAAE;EAC3D,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMc,MAAM,GAAG,SAAS,CAAC,CAAC;;EAE1Bb,SAAS,CAAC,MAAM;IACZc,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,eAAe,GAAG,MAAMd,kBAAkB,CAACM,MAAM,CAAC;IACxDG,WAAW,CAACK,eAAe,CAAC,CAAC,CAAC;EAClC,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAOC,KAAsB,IAAK;IAC1DA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAIP,UAAU,CAACQ,IAAI,CAAC,CAAC,EAAE;MACnB,MAAMC,OAAO,GAAG,MAAMlB,WAAW,CAACS,UAAU,EAAEJ,MAAM,EAAEM,MAAM,CAAC;MAC7DH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEW,OAAO,CAAC,CAAC,CAAC,CAAE;MACtCR,aAAa,CAAC,EAAE,CAAC;IACrB;EACJ,CAAC;EAED,oBACIP,OAAA;IAAKgB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BjB,OAAA;MAAMgB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC3BjB,OAAA;QAAUkB,WAAW,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eACpDtB,OAAA;QAAQuB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,EAENlB,QAAQ,CAACoB,GAAG,CAACT,OAAO,iBACjBf,OAAA,CAACF,OAAO;MAAmBiB,OAAO,EAAEA;IAAQ,GAA9BA,OAAO,CAACU,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACnB,EAAA,CAnCIF,eAA+C;AAAAyB,EAAA,GAA/CzB,eAA+C;AAqCrD,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}