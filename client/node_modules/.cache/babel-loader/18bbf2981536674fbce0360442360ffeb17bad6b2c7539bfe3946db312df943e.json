{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data.data;\n};\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\nexport const upvotePost = async payload => {\n  try {\n    const response = await api.post('/post/upvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\nexport const downvotePost = async payload => {\n  try {\n    const response = await api.post('/post/downvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\nexport const undoVotePost = async payload => {\n  try {\n    const response = await api.post('/post/undovote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","fetchPosts","response","get","data","createPost","postData","post","error","console","fetchPostVotes","postId","success","netVotes","Error","message","fetchCommentsCount","count","upvotePost","payload","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/api/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:4000/api';\n\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\ninterface PostData {\n    _id: string;\n    title: string;\n    text: string;\n    link?: string;\n    userId: string;\n    _creator: { username: string };\n    createdAt: string;\n    updatedAt?: string;\n}\n\ninterface VotePayload {\n    postId: string;\n    userId: string;\n}\n\ninterface VoteResponse {\n    success: boolean;\n    netVotes?: number;\n    message?: string;\n}\n\nexport const fetchPosts = async (): Promise<PostData[]> => {\n    const response = await api.get<{ data: PostData[] }>('/posts');\n    return response.data.data;\n};\n\nexport const createPost = async (postData: PostData): Promise<PostData> => {\n    try {\n        const response = await api.post<{ data: PostData }>('/post', postData);\n        return response.data.data;\n    } catch (error) {\n        console.error(\"Failed to create a post:\", error);\n        throw error;\n    }\n};\n\nexport const fetchPostVotes = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<VoteResponse>(`/post/${postId}/votes`);\n        if (response.data.success) {\n            return response.data.netVotes!;\n        } else {\n            throw new Error('API response was not successful: ' + response.data.message);\n        }\n    } catch (error) {\n        console.error(`Failed to fetch votes for post ${postId}:`, error);\n        throw error;\n    }\n};\n\nexport const fetchCommentsCount = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n        if (response.data.success) {\n            return response.data.count;\n        } else {\n            throw new Error('API response was not successful');\n        }\n    } catch (error) {\n        console.error(`Failed to fetch comments count for post ${postId}:`, error);\n        throw error;\n    }\n};\n\nexport const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/upvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to upvote post:\", error);\n        throw error;\n    }\n};\n\nexport const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/downvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to downvote post:\", error);\n        throw error;\n    }\n};\n\nexport const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/undovote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to undo vote:\", error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}