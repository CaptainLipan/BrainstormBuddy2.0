{"ast":null,"code":"var _jsxFileName = \"/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport Comment from './Comment';\nimport './Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  postId,\n  userId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // Track loading state\n  const [error, setError] = useState(null); // Track any errors\n\n  // Use useEffect for data fetching and potential user ID retrieval\n  useEffect(() => {\n    const fetchComments = async () => {\n      setIsLoading(true);\n      setError(null); // Clear any previous errors\n\n      try {\n        const fetchedComments = await getCommentsForPost(postId);\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error('Failed to load comments', error);\n        setError('Failed to fetch comments. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchComments();\n  }, [postId]);\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!newComment.trim()) return; // Prevent empty comment submission\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const comment = await postComment(newComment, postId, userId || 'user-id'); // Use prop or default value\n\n      // Optimistic update (update local state first)\n      setComments([...comments, comment]);\n      setNewComment('');\n\n      // Re-fetch comments to reflect actual server response (optional)\n      // const updatedComments = await getCommentsForPost(postId);\n      // setComments(updatedComments);\n    } catch (error) {\n      console.error('Failed to post comment', error);\n      setError('Failed to create comment. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comments-form\",\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment...\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        disabled: isLoading // Disable textarea during loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Posting...' : 'Post Comment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment\n    }, comment._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsSection, \"JN9n8hBDwI20kp/892nCsn967+g=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","getCommentsForPost","postComment","Comment","jsxDEV","_jsxDEV","CommentsSection","postId","userId","_s","comments","setComments","newComment","setNewComment","isLoading","setIsLoading","error","setError","fetchComments","fetchedComments","console","handleCommentSubmit","event","preventDefault","trim","comment","className","children","onSubmit","placeholder","value","onChange","e","target","disabled","fileName","_jsxFileName","lineNumber","columnNumber","type","map","_id","_c","$RefreshReg$"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport Comment from './Comment';\nimport { IComment } from '../../../models/comment/CommentModel';\nimport './Comment.css';\n\ninterface CommentsSectionProps {\n    postId: string;\n    userId?: string; // Optional user ID prop (if not using a state management solution)\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ postId, userId }) => {\n    const [comments, setComments] = useState<IComment[]>([]);\n    const [newComment, setNewComment] = useState('');\n    const [isLoading, setIsLoading] = useState(false); // Track loading state\n    const [error, setError] = useState(null); // Track any errors\n\n    // Use useEffect for data fetching and potential user ID retrieval\n    useEffect(() => {\n        const fetchComments = async () => {\n            setIsLoading(true);\n            setError(null); // Clear any previous errors\n\n            try {\n                const fetchedComments = await getCommentsForPost(postId);\n                setComments(fetchedComments);\n            } catch (error) {\n                console.error('Failed to load comments', error);\n                setError('Failed to fetch comments. Please try again later.');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchComments();\n    }, [postId]);\n\n    const handleCommentSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!newComment.trim()) return; // Prevent empty comment submission\n\n        setIsLoading(true);\n        setError(null);\n\n        try {\n            const comment = await postComment(newComment, postId, userId || 'user-id'); // Use prop or default value\n\n            // Optimistic update (update local state first)\n            setComments([...comments, comment]);\n            setNewComment('');\n\n            // Re-fetch comments to reflect actual server response (optional)\n            // const updatedComments = await getCommentsForPost(postId);\n            // setComments(updatedComments);\n        } catch (error) {\n            console.error('Failed to post comment', error);\n            setError('Failed to create comment. Please try again later.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"comments-section\">\n            <form className=\"comments-form\" onSubmit={handleCommentSubmit}>\n        <textarea\n            placeholder=\"Add a comment...\"\n            value={newComment}\n            onChange={(e) => setNewComment(e.target.value)}\n            disabled={isLoading} // Disable textarea during loading\n        />\n                <button type=\"submit\" disabled={isLoading}>\n                    {isLoading ? 'Posting...' : 'Post Comment'}\n                </button>\n            </form>\n            {error && <div className=\"error-message\">{error}</div>}\n            {isLoading ? (\n                <div className=\"loading-message\">Loading comments...</div>\n            ) : (\n                comments.map((comment) => (\n                    <Comment key={comment._id} comment={comment} />\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default CommentsSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}