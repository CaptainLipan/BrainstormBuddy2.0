{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nexport const toggleVote = async (type, id, voteType, userId) => {\n  return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, {\n    userId\n  });\n};\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interface for data needed to create a post\n\n// Interface for the structure of a post as returned from the backend\n\n// Interface for data needed to create a post\n\n// Interface for the structure of a post as returned from the backend\n\n// Interface for data needed to create a comment\n\n// Interface for the structure of a comment as returned from the backend\n\n// Interface for the voting functionality\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data.data;\n};\n\n// Function to create a new post\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\nexport const getCommentsForPost = async postId => {\n  try {\n    const response = await axios.get(`${API_URL}/post/${postId}/comments`);\n    return response.data.comments; // adjust according to the actual API response\n  } catch (error) {\n    throw error;\n  }\n};\nexport const postComment = async (text, postId, userId) => {\n  try {\n    const response = await axios.post(`${API_URL}/comment`, {\n      text,\n      postId,\n      userId\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Voting functions\nexport const upvotePost = async payload => {\n  try {\n    const response = await api.post('/post/upvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\nexport const downvotePost = async payload => {\n  try {\n    const response = await api.post('/post/downvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\nexport const undoVotePost = async payload => {\n  try {\n    const response = await api.post('/post/undovote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","toggleVote","type","id","voteType","userId","post","api","create","baseURL","headers","fetchPosts","response","get","data","createPost","postData","error","console","getCommentsForPost","postId","comments","postComment","text","fetchPostVotes","success","netVotes","Error","message","fetchCommentsCount","count","upvotePost","payload","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/api/api.ts"],"sourcesContent":["        import axios from 'axios';\n\n        const API_URL = 'http://localhost:4000/api';\n\n        export const toggleVote = async (type: string, id: string, voteType: 'upvote' | 'downvote', userId: string): Promise<any> => {\n            return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, { userId });\n        };\n        const api = axios.create({\n            baseURL: API_URL,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n\n        // Interface for data needed to create a post\n        interface CreatePostInput {\n            title: string;\n            text: string;\n            link?: string;\n            userId: string;  // User ID should be supplied from the client\n        }\n\n        // Interface for the structure of a post as returned from the backend\n        interface PostData {\n            _id: string;\n            title: string;\n            text: string;\n            link?: string;\n            userId: string;\n            _creator: {\n                username: string;\n            };\n            createdAt: string;\n            updatedAt?: string;\n        }\n\n        // Interface for data needed to create a post\n        interface CreatePostInput {\n            title: string;\n            text: string;\n            link?: string;\n            userId: string;  // User ID should be supplied from the client\n        }\n\n        // Interface for the structure of a post as returned from the backend\n        interface PostData {\n            _id: string;\n            title: string;\n            text: string;\n            link?: string;\n            userId: string;\n            _creator: {\n                username: string;\n            };\n            createdAt: string;\n            updatedAt?: string;\n        }\n\n        // Interface for data needed to create a comment\n        interface CreateCommentInput {\n            text: string;\n            postId: string;\n            userId: string; // User ID should be supplied from the client\n        }\n\n        // Interface for the structure of a comment as returned from the backend\n        interface CommentData {\n            _id: string;\n            text: string;\n            postId: string;\n            userId: string;\n            _creator: {\n                username: string;\n            };\n            createdAt: string;\n            updatedAt?: string;\n        }\n\n        // Interface for the voting functionality\n        interface VotePayload {\n            postId: string;\n            userId: string;\n        }\n\n        interface VoteResponse {\n            success: boolean;\n            netVotes?: number;\n            message?: string;\n        }\n\n        // Function to fetch all posts\n        export const fetchPosts = async (): Promise<PostData[]> => {\n            const response = await api.get<{ data: PostData[] }>('/posts');\n            return response.data.data;\n        };\n\n        // Function to create a new post\n        export const createPost = async (postData: CreatePostInput): Promise<PostData> => {\n            try {\n                const response = await api.post<{ data: PostData }>('/post', postData);\n                return response.data.data;\n            } catch (error) {\n                console.error(\"Failed to create a post:\", error);\n                throw error;\n            }\n        };\n        export const getCommentsForPost = async (postId: string) => {\n            try {\n                const response = await axios.get(`${API_URL}/post/${postId}/comments`);\n                return response.data.comments; // adjust according to the actual API response\n            } catch (error) {\n                throw error;\n            }\n        };\n\n        export const postComment = async (text: string, postId: string, userId: string) => {\n            try {\n                const response = await axios.post(`${API_URL}/comment`, { text, postId, userId });\n                return response.data;\n            } catch (error) {\n                throw error;\n            }\n        };\n\n        // Function to fetch the vote count for a specific post\n        export const fetchPostVotes = async (postId: string): Promise<number> => {\n            try {\n                const response = await api.get<VoteResponse>(`/post/${postId}/votes`);\n                if (response.data.success) {\n                    return response.data.netVotes!;\n                } else {\n                    throw new Error('API response was not successful: ' + response.data.message);\n                }\n            } catch (error) {\n                console.error(`Failed to fetch votes for post ${postId}:`, error);\n                throw error;\n            }\n        };\n\n        // Function to fetch the number of comments for a specific post\n        export const fetchCommentsCount = async (postId: string): Promise<number> => {\n            try {\n                const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n                if (response.data.success) {\n                    return response.data.count;\n                } else {\n                    throw new Error('API response was not successful');\n                }\n            } catch (error) {\n                console.error(`Failed to fetch comments count for post ${postId}:`, error);\n                throw error;\n            }\n        };\n\n        // Voting functions\n        export const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n            try {\n                const response = await api.post<VoteResponse>('/post/upvote', payload);\n                return response.data;\n            } catch (error) {\n                console.error(\"Failed to upvote post:\", error);\n                throw error;\n            }\n        };\n\n        export const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n            try {\n                const response = await api.post<VoteResponse>('/post/downvote', payload);\n                return response.data;\n            } catch (error) {\n                console.error(\"Failed to downvote post:\", error);\n                throw error;\n            }\n        };\n\n        export const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n            try {\n                const response = await api.post<VoteResponse>('/post/undovote', payload);\n                return response.data;\n            } catch (error) {\n                console.error(\"Failed to undo vote:\", error);\n                throw error;\n            }\n        };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}