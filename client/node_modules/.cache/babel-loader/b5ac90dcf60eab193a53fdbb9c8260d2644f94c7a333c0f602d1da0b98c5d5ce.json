{"ast":null,"code":"// src/api/api.ts\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nexport const toggleVote = async (type, id, voteType, userId) => {\n  return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, {\n    userId\n  });\n};\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interface for data needed to create a post\n\n// Interface for the structure of a post as returned from the backend\n\n// Function to fetch all posts with comments count\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  const posts = response.data.data;\n\n  // Fetch comments count for each post\n  const postsWithCommentsCount = await Promise.all(posts.map(async post => {\n    const commentsCount = await fetchCommentsCount(post._id);\n    return {\n      ...post,\n      commentsCount: commentsCount || 0\n    };\n  }));\n  return postsWithCommentsCount;\n};\n\n// Function to create a new post\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async postId => {\n  try {\n    const response = await axios.get(`${API_URL}/post/${postId}/comments`);\n    return response.data.comments;\n  } catch (error) {\n    var _error$response;\n    if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n      return []; // Return an empty array if no comments are found\n    }\n    throw error;\n  }\n};\n\n// Function to post a comment\nexport const postComment = async commentData => {\n  try {\n    const response = await axios.post(`${API_URL}/comment`, commentData);\n    return response.data.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Interface for the voting functionality\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Voting functions\nexport const upvotePost = async payload => {\n  try {\n    const response = await api.post('/post/upvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\nexport const downvotePost = async payload => {\n  try {\n    const response = await api.post('/post/downvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\nexport const undoVotePost = async payload => {\n  try {\n    const response = await api.post('/post/undovote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","toggleVote","type","id","voteType","userId","post","api","create","baseURL","headers","fetchPosts","response","get","posts","data","postsWithCommentsCount","Promise","all","map","commentsCount","fetchCommentsCount","_id","createPost","postData","error","console","getCommentsForPost","postId","comments","_error$response","isAxiosError","status","postComment","commentData","fetchPostVotes","success","netVotes","Error","message","count","upvotePost","payload","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/api/api.ts"],"sourcesContent":["// src/api/api.ts\n\nimport axios from 'axios';\nimport { Post } from '../models/post/PostModel';\nimport { CommentData, CreateCommentInput } from '../models/comment/CommentModel';\n\nconst API_URL = 'http://localhost:4000/api';\n\nexport const toggleVote = async (type: string, id: string, voteType: 'upvote' | 'downvote', userId: string): Promise<any> => {\n    return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, { userId });\n};\n\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// Interface for data needed to create a post\ninterface CreatePostInput {\n    title: string;\n    text: string;\n    link?: string;\n    userId: string;  // User ID should be supplied from the client\n}\n\n// Interface for the structure of a post as returned from the backend\ninterface PostData extends Post {\n    commentsCount?: number;\n}\n\n// Function to fetch all posts with comments count\nexport const fetchPosts = async (): Promise<PostData[]> => {\n    const response = await api.get<{ data: PostData[] }>('/posts');\n    const posts = response.data.data;\n\n    // Fetch comments count for each post\n    const postsWithCommentsCount = await Promise.all(\n        posts.map(async (post) => {\n            const commentsCount = await fetchCommentsCount(post._id);\n            return {\n                ...post,\n                commentsCount: commentsCount || 0,\n            };\n        })\n    );\n\n    return postsWithCommentsCount;\n};\n\n// Function to create a new post\nexport const createPost = async (postData: CreatePostInput): Promise<PostData> => {\n    try {\n        const response = await api.post<{ data: PostData }>('/post', postData);\n        return response.data.data;\n    } catch (error) {\n        console.error(\"Failed to create a post:\", error);\n        throw error;\n    }\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async (postId: string): Promise<CommentData[]> => {\n    try {\n        const response = await axios.get<{ comments: CommentData[] }>(`${API_URL}/post/${postId}/comments`);\n        return response.data.comments;\n    } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 404) {\n            return []; // Return an empty array if no comments are found\n        }\n        throw error;\n    }\n};\n\n// Function to post a comment\nexport const postComment = async (commentData: CreateCommentInput): Promise<CommentData> => {\n    try {\n        const response = await axios.post<{ data: CommentData }>(`${API_URL}/comment`, commentData);\n        return response.data.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// Interface for the voting functionality\ninterface VotePayload {\n    postId: string;\n    userId: string;\n}\n\ninterface VoteResponse {\n    success: boolean;\n    netVotes?: number;\n    message?: string;\n}\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<VoteResponse>(`/post/${postId}/votes`);\n        if (response.data.success) {\n            return response.data.netVotes!;\n        } else {\n            throw new Error('API response was not successful: ' + response.data.message);\n        }\n    } catch (error) {\n        console.error(`Failed to fetch votes for post ${postId}:`, error);\n        throw error;\n    }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n        if (response.data.success) {\n            return response.data.count;\n        } else {\n            throw new Error('API response was not successful');\n        }\n    } catch (error) {\n        console.error(`Failed to fetch comments count for post ${postId}:`, error);\n        throw error;\n    }\n};\n\n// Voting functions\nexport const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/upvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to upvote post:\", error);\n        throw error;\n    }\n};\n\nexport const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/downvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to downvote post:\", error);\n        throw error;\n    }\n};\n\nexport const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/undovote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to undo vote:\", error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAY,EAAEC,EAAU,EAAEC,QAA+B,EAAEC,MAAc,KAAmB;EACzH,OAAON,KAAK,CAACO,IAAI,CAAE,GAAEN,OAAQ,gBAAeE,IAAK,IAAGC,EAAG,IAAGC,QAAS,EAAC,EAAE;IAAEC;EAAO,CAAC,CAAC;AACrF,CAAC;AAED,MAAME,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC;EACrBC,OAAO,EAAET,OAAO;EAChBU,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;;AAQA;;AAKA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAiC;EACvD,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAuB,QAAQ,CAAC;EAC9D,MAAMC,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACA,IAAI;;EAEhC;EACA,MAAMC,sBAAsB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC5CJ,KAAK,CAACK,GAAG,CAAC,MAAOb,IAAI,IAAK;IACtB,MAAMc,aAAa,GAAG,MAAMC,kBAAkB,CAACf,IAAI,CAACgB,GAAG,CAAC;IACxD,OAAO;MACH,GAAGhB,IAAI;MACPc,aAAa,EAAEA,aAAa,IAAI;IACpC,CAAC;EACL,CAAC,CACL,CAAC;EAED,OAAOJ,sBAAsB;AACjC,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAG,MAAOC,QAAyB,IAAwB;EAC9E,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACD,IAAI,CAAqB,OAAO,EAAEkB,QAAQ,CAAC;IACtE,OAAOZ,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC7B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAOC,MAAc,IAA6B;EAChF,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAA+B,GAAEb,OAAQ,SAAQ4B,MAAO,WAAU,CAAC;IACnG,OAAOhB,QAAQ,CAACG,IAAI,CAACc,QAAQ;EACjC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IAAA,IAAAK,eAAA;IACZ,IAAI/B,KAAK,CAACgC,YAAY,CAACN,KAAK,CAAC,IAAI,EAAAK,eAAA,GAAAL,KAAK,CAACb,QAAQ,cAAAkB,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;MAC7D,OAAO,EAAE,CAAC,CAAC;IACf;IACA,MAAMP,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAOC,WAA+B,IAA2B;EACxF,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMb,KAAK,CAACO,IAAI,CAAyB,GAAEN,OAAQ,UAAS,EAAEkC,WAAW,CAAC;IAC3F,OAAOtB,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC7B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;;AAYA;AACA,OAAO,MAAMU,cAAc,GAAG,MAAOP,MAAc,IAAsB;EACrE,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAgB,SAAQe,MAAO,QAAO,CAAC;IACrE,IAAIhB,QAAQ,CAACG,IAAI,CAACqB,OAAO,EAAE;MACvB,OAAOxB,QAAQ,CAACG,IAAI,CAACsB,QAAQ;IACjC,CAAC,MAAM;MACH,MAAM,IAAIC,KAAK,CAAC,mCAAmC,GAAG1B,QAAQ,CAACG,IAAI,CAACwB,OAAO,CAAC;IAChF;EACJ,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAE,kCAAiCG,MAAO,GAAE,EAAEH,KAAK,CAAC;IACjE,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMJ,kBAAkB,GAAG,MAAOO,MAAc,IAAsB;EACzE,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAuC,SAAQe,MAAO,iBAAgB,CAAC;IACrG,IAAIhB,QAAQ,CAACG,IAAI,CAACqB,OAAO,EAAE;MACvB,OAAOxB,QAAQ,CAACG,IAAI,CAACyB,KAAK;IAC9B,CAAC,MAAM;MACH,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;IACtD;EACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAE,2CAA0CG,MAAO,GAAE,EAAEH,KAAK,CAAC;IAC1E,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMgB,UAAU,GAAG,MAAOC,OAAoB,IAA4B;EAC7E,IAAI;IACA,MAAM9B,QAAQ,GAAG,MAAML,GAAG,CAACD,IAAI,CAAe,cAAc,EAAEoC,OAAO,CAAC;IACtE,OAAO9B,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMkB,YAAY,GAAG,MAAOD,OAAoB,IAA4B;EAC/E,IAAI;IACA,MAAM9B,QAAQ,GAAG,MAAML,GAAG,CAACD,IAAI,CAAe,gBAAgB,EAAEoC,OAAO,CAAC;IACxE,OAAO9B,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMmB,YAAY,GAAG,MAAOF,OAAoB,IAA4B;EAC/E,IAAI;IACA,MAAM9B,QAAQ,GAAG,MAAML,GAAG,CAACD,IAAI,CAAe,gBAAgB,EAAEoC,OAAO,CAAC;IACxE,OAAO9B,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}