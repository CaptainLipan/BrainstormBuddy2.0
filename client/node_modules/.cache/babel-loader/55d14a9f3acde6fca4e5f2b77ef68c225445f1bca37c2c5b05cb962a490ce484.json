{"ast":null,"code":"import { upvotePost, downvotePost } from '../../../api/api';\nexport const handleVote = async (posts, setPosts, postId, type) => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (!user || !user._id) {\n    alert(\"You need to be logged in to vote.\");\n    return;\n  }\n  const userId = user._id;\n  const postIndex = posts.findIndex(post => post._id === postId);\n  if (postIndex === -1) {\n    alert(\"Post not found.\");\n    return;\n  }\n  let currentPost = posts[postIndex];\n  try {\n    const response = await (type === 'upvote' ? upvotePost : downvotePost)({\n      postId,\n      userId\n    });\n    if (response.success) {\n      var _response$netVotes;\n      currentPost.upvotes = (_response$netVotes = response.netVotes) !== null && _response$netVotes !== void 0 ? _response$netVotes : currentPost.upvotes;\n      posts[postIndex] = currentPost;\n      setPosts([...posts]);\n    } else {\n      alert(response.message);\n    }\n  } catch (error) {\n    alert(\"Failed to execute vote operation.\");\n  }\n};","map":{"version":3,"names":["upvotePost","downvotePost","handleVote","posts","setPosts","postId","type","user","JSON","parse","localStorage","getItem","_id","alert","userId","postIndex","findIndex","post","currentPost","response","success","_response$netVotes","upvotes","netVotes","message","error"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/components/mainbar/posts/handleVote.ts"],"sourcesContent":["import { upvotePost, downvotePost } from '../../../api/api';\nimport { Post } from '../../../models/post/PostModel';\n\ntype VoteType = 'upvote' | 'downvote';\n\nexport const handleVote = async (\n    posts: Post[],\n    setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n    postId: string,\n    type: VoteType,\n): Promise<void> => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user || !user._id) {\n        alert(\"You need to be logged in to vote.\");\n        return;\n    }\n\n    const userId = user._id;\n    const postIndex = posts.findIndex(post => post._id === postId);\n    if (postIndex === -1) {\n        alert(\"Post not found.\");\n        return;\n    }\n\n    let currentPost = posts[postIndex];\n    try {\n        const response = await (type === 'upvote' ? upvotePost : downvotePost)({\n            postId,\n            userId\n        });\n\n        if (response.success) {\n            currentPost.upvotes = response.netVotes ?? currentPost.upvotes;\n            posts[postIndex] = currentPost;\n            setPosts([...posts]);\n        } else {\n            alert(response.message);\n        }\n    } catch (error) {\n        alert(\"Failed to execute vote operation.\");\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,QAAQ,kBAAkB;AAK3D,OAAO,MAAMC,UAAU,GAAG,MAAAA,CACtBC,KAAa,EACbC,QAAsD,EACtDC,MAAc,EACdC,IAAc,KACE;EAChB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,IAAI,CAACJ,IAAI,IAAI,CAACA,IAAI,CAACK,GAAG,EAAE;IACpBC,KAAK,CAAC,mCAAmC,CAAC;IAC1C;EACJ;EAEA,MAAMC,MAAM,GAAGP,IAAI,CAACK,GAAG;EACvB,MAAMG,SAAS,GAAGZ,KAAK,CAACa,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,GAAG,KAAKP,MAAM,CAAC;EAC9D,IAAIU,SAAS,KAAK,CAAC,CAAC,EAAE;IAClBF,KAAK,CAAC,iBAAiB,CAAC;IACxB;EACJ;EAEA,IAAIK,WAAW,GAAGf,KAAK,CAACY,SAAS,CAAC;EAClC,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAM,CAACb,IAAI,KAAK,QAAQ,GAAGN,UAAU,GAAGC,YAAY,EAAE;MACnEI,MAAM;MACNS;IACJ,CAAC,CAAC;IAEF,IAAIK,QAAQ,CAACC,OAAO,EAAE;MAAA,IAAAC,kBAAA;MAClBH,WAAW,CAACI,OAAO,IAAAD,kBAAA,GAAGF,QAAQ,CAACI,QAAQ,cAAAF,kBAAA,cAAAA,kBAAA,GAAIH,WAAW,CAACI,OAAO;MAC9DnB,KAAK,CAACY,SAAS,CAAC,GAAGG,WAAW;MAC9Bd,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;IACxB,CAAC,MAAM;MACHU,KAAK,CAACM,QAAQ,CAACK,OAAO,CAAC;IAC3B;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZZ,KAAK,CAAC,mCAAmC,CAAC;EAC9C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}