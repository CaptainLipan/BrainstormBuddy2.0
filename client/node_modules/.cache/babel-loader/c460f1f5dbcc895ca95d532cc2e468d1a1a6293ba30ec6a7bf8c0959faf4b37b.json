{"ast":null,"code":"// api.js\n\nimport axios from 'axios';\n\n// Define an interface for the post data\n\nconst API_URL = 'http://localhost:4000/api'; // Base URL for API calls\n\n// Axios instance to set up a base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  try {\n    const response = await api.get('/posts');\n    return response.data.data; // Accessing the 'data' property from the response\n  } catch (error) {\n    console.error(\"Failed to fetch posts:\", error);\n    throw error;\n  }\n};\n\n// Function to create a new post\nexport const createPost = async post => {\n  try {\n    const response = await api.post('/posts', post);\n    return response.data.data; // Accessing the 'data' property from the response\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes; // Extracting 'netVotes' if the request was successful\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count; // Extracting the count of comments if the request was successful\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","fetchPosts","response","get","data","error","console","createPost","post","fetchPostVotes","postId","success","netVotes","Error","fetchCommentsCount","count"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/api/api.ts"],"sourcesContent":["// api.js\n\nimport axios from 'axios';\n\n// Define an interface for the post data\ninterface PostData {\n    title: string;\n    text: string;\n    link: string;\n    userId: string;\n}\n\nconst API_URL = 'http://localhost:4000/api'; // Base URL for API calls\n\n// Axios instance to set up a base configuration\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n    try {\n        const response = await api.get('/posts');\n        return response.data.data; // Accessing the 'data' property from the response\n    } catch (error) {\n        console.error(\"Failed to fetch posts:\", error);\n        throw error;\n    }\n};\n\n// Function to create a new post\nexport const createPost = async (post: PostData) => {\n    try {\n        const response = await api.post('/posts', post);\n        return response.data.data; // Accessing the 'data' property from the response\n    } catch (error) {\n        console.error(\"Failed to create a post:\", error);\n        throw error;\n    }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async (postId: string) => {\n    try {\n        const response = await api.get(`/post/${postId}/votes`);\n        if (response.data.success) {\n            return response.data.netVotes; // Extracting 'netVotes' if the request was successful\n        } else {\n            throw new Error('API response was not successful');\n        }\n    } catch (error) {\n        console.error(`Failed to fetch votes for post ${postId}:`, error);\n        throw error;\n    }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async (postId: string) => {\n    try {\n        const response = await api.get(`/post/${postId}/comments/count`);\n        if (response.data.success) {\n            return response.data.count; // Extracting the count of comments if the request was successful\n        } else {\n            throw new Error('API response was not successful');\n        }\n    } catch (error) {\n        console.error(`Failed to fetch comments count for post ${postId}:`, error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAQA,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAOC,IAAc,IAAK;EAChD,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACW,IAAI,CAAC,QAAQ,EAAEA,IAAI,CAAC;IAC/C,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,MAAc,IAAK;EACpD,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAE,SAAQO,MAAO,QAAO,CAAC;IACvD,IAAIR,QAAQ,CAACE,IAAI,CAACO,OAAO,EAAE;MACvB,OAAOT,QAAQ,CAACE,IAAI,CAACQ,QAAQ,CAAC,CAAC;IACnC,CAAC,MAAM;MACH,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACtD;EACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAE,kCAAiCK,MAAO,GAAE,EAAEL,KAAK,CAAC;IACjE,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,kBAAkB,GAAG,MAAOJ,MAAc,IAAK;EACxD,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAE,SAAQO,MAAO,iBAAgB,CAAC;IAChE,IAAIR,QAAQ,CAACE,IAAI,CAACO,OAAO,EAAE;MACvB,OAAOT,QAAQ,CAACE,IAAI,CAACW,KAAK,CAAC,CAAC;IAChC,CAAC,MAAM;MACH,MAAM,IAAIF,KAAK,CAAC,iCAAiC,CAAC;IACtD;EACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAE,2CAA0CK,MAAO,GAAE,EAAEL,KAAK,CAAC;IAC1E,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}