{"ast":null,"code":"import { upvotePost, downvotePost, undoVotePost } from '../../../api/api';\nexport const handleVote = async (posts, setPosts, postId, type) => {\n  // Retrieve user information from localStorage safely\n  const rawUserData = localStorage.getItem('user');\n  if (!rawUserData) {\n    console.error(\"No user logged in or invalid user data\");\n    alert(\"You need to be logged in to vote.\");\n    return;\n  }\n  const user = JSON.parse(rawUserData);\n  if (!user._id) {\n    console.error(\"Invalid user data\");\n    alert(\"Invalid user session. Please log in again.\");\n    return;\n  }\n  const userId = user._id; // Make sure the user ID is correctly retrieved\n\n  const postIndex = posts.findIndex(post => post._id === postId);\n  if (postIndex === -1) {\n    console.error(\"Post not found for the given ID:\", postId);\n    return;\n  }\n  let updatedPosts = [...posts];\n  let currentPost = updatedPosts[postIndex];\n  try {\n    const response = await (type === 'upvote' ? upvotePost : type === 'downvote' ? downvotePost : undoVotePost)({\n      postId,\n      userId\n    });\n    if (response.success) {\n      var _response$netVotes;\n      currentPost.upvotes = (_response$netVotes = response.netVotes) !== null && _response$netVotes !== void 0 ? _response$netVotes : currentPost.upvotes;\n      updatedPosts[postIndex] = currentPost;\n      setPosts(updatedPosts);\n    } else {\n      console.error(\"API error response:\", response.message);\n    }\n  } catch (error) {\n    console.error(\"Failed to execute vote operation:\", error);\n  }\n};","map":{"version":3,"names":["upvotePost","downvotePost","undoVotePost","handleVote","posts","setPosts","postId","type","rawUserData","localStorage","getItem","console","error","alert","user","JSON","parse","_id","userId","postIndex","findIndex","post","updatedPosts","currentPost","response","success","_response$netVotes","upvotes","netVotes","message"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/components/mainbar/posts/handleVote.ts"],"sourcesContent":["import { upvotePost, downvotePost, undoVotePost } from '../../../api/api';\nimport { Post } from '../../../models/post/PostModel';\n\ntype VoteType = 'upvote' | 'downvote' | 'undo';\n\nexport const handleVote = async (\n    posts: Post[],\n    setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n    postId: string,\n    type: VoteType,\n): Promise<void> => {\n    // Retrieve user information from localStorage safely\n    const rawUserData = localStorage.getItem('user');\n    if (!rawUserData) {\n        console.error(\"No user logged in or invalid user data\");\n        alert(\"You need to be logged in to vote.\");\n        return;\n    }\n\n    const user = JSON.parse(rawUserData);\n    if (!user._id) {\n        console.error(\"Invalid user data\");\n        alert(\"Invalid user session. Please log in again.\");\n        return;\n    }\n\n    const userId = user._id; // Make sure the user ID is correctly retrieved\n\n    const postIndex = posts.findIndex(post => post._id === postId);\n    if (postIndex === -1) {\n        console.error(\"Post not found for the given ID:\", postId);\n        return;\n    }\n\n    let updatedPosts = [...posts];\n    let currentPost = updatedPosts[postIndex];\n\n    try {\n        const response = await (type === 'upvote' ? upvotePost : type === 'downvote' ? downvotePost : undoVotePost)({\n            postId,\n            userId\n        });\n\n        if (response.success) {\n            currentPost.upvotes = response.netVotes ?? currentPost.upvotes;\n            updatedPosts[postIndex] = currentPost;\n            setPosts(updatedPosts);\n        } else {\n            console.error(\"API error response:\", response.message);\n        }\n    } catch (error) {\n        console.error(\"Failed to execute vote operation:\", error);\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,EAAEC,YAAY,QAAQ,kBAAkB;AAKzE,OAAO,MAAMC,UAAU,GAAG,MAAAA,CACtBC,KAAa,EACbC,QAAsD,EACtDC,MAAc,EACdC,IAAc,KACE;EAChB;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAChD,IAAI,CAACF,WAAW,EAAE;IACdG,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;IACvDC,KAAK,CAAC,mCAAmC,CAAC;IAC1C;EACJ;EAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACR,WAAW,CAAC;EACpC,IAAI,CAACM,IAAI,CAACG,GAAG,EAAE;IACXN,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;IAClCC,KAAK,CAAC,4CAA4C,CAAC;IACnD;EACJ;EAEA,MAAMK,MAAM,GAAGJ,IAAI,CAACG,GAAG,CAAC,CAAC;;EAEzB,MAAME,SAAS,GAAGf,KAAK,CAACgB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,GAAG,KAAKX,MAAM,CAAC;EAC9D,IAAIa,SAAS,KAAK,CAAC,CAAC,EAAE;IAClBR,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEN,MAAM,CAAC;IACzD;EACJ;EAEA,IAAIgB,YAAY,GAAG,CAAC,GAAGlB,KAAK,CAAC;EAC7B,IAAImB,WAAW,GAAGD,YAAY,CAACH,SAAS,CAAC;EAEzC,IAAI;IACA,MAAMK,QAAQ,GAAG,MAAM,CAACjB,IAAI,KAAK,QAAQ,GAAGP,UAAU,GAAGO,IAAI,KAAK,UAAU,GAAGN,YAAY,GAAGC,YAAY,EAAE;MACxGI,MAAM;MACNY;IACJ,CAAC,CAAC;IAEF,IAAIM,QAAQ,CAACC,OAAO,EAAE;MAAA,IAAAC,kBAAA;MAClBH,WAAW,CAACI,OAAO,IAAAD,kBAAA,GAAGF,QAAQ,CAACI,QAAQ,cAAAF,kBAAA,cAAAA,kBAAA,GAAIH,WAAW,CAACI,OAAO;MAC9DL,YAAY,CAACH,SAAS,CAAC,GAAGI,WAAW;MACrClB,QAAQ,CAACiB,YAAY,CAAC;IAC1B,CAAC,MAAM;MACHX,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEY,QAAQ,CAACK,OAAO,CAAC;IAC1D;EACJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC7D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}