{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interface for data needed to create a post\n\n// Interface for the structure of a post as returned from the backend\n\n// Interface for data needed to create a comment\n\n// Interface for the structure of a comment as returned from the backend\n\n// Interface for the voting functionality\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data.data;\n};\n\n// Function to create a new post\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\n// Function to create a new comment\nexport const createComment = async commentData => {\n  try {\n    const response = await api.post('/post/comment', commentData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a comment:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to upvote a post\nexport const upvotePost = async payload => {\n  try {\n    const response = await api.post('/post/upvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\n\n// Function to downvote a post\nexport const downvotePost = async payload => {\n  try {\n    const response = await api.post('/post/downvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\n\n// Function to undo a vote on a post\nexport const undoVotePost = async payload => {\n  try {\n    const response = await api.post('/post/undovote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","fetchPosts","response","get","data","createPost","postData","post","error","console","createComment","commentData","fetchPostVotes","postId","success","netVotes","Error","message","fetchCommentsCount","count","upvotePost","payload","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/api/api.ts"],"sourcesContent":["    import axios from 'axios';\n\n    const API_URL = 'http://localhost:4000/api';\n\n    const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    // Interface for data needed to create a post\n    interface CreatePostInput {\n        title: string;\n        text: string;\n        link?: string;\n        userId: string;  // User ID should be supplied from the client\n    }\n\n    // Interface for the structure of a post as returned from the backend\n    interface PostData {\n        _id: string;\n        title: string;\n        text: string;\n        link?: string;\n        userId: string;\n        _creator: {\n            username: string;\n        };\n        createdAt: string;\n        updatedAt?: string;\n    }\n    // Interface for data needed to create a comment\n    interface CreateCommentInput {\n        text: string;\n        postId: string;\n        userId: string; // User ID should be supplied from the client\n    }\n    // Interface for the structure of a comment as returned from the backend\n    interface CommentData {\n        _id: string;\n        text: string;\n        postId: string;\n        userId: string;\n        _creator: {\n            username: string;\n        };\n        createdAt: string;\n        updatedAt?: string;\n    }\n\n    // Interface for the voting functionality\n    interface VotePayload {\n        postId: string;\n        userId: string;\n    }\n\n    interface VoteResponse {\n        success: boolean;\n        netVotes?: number;\n        message?: string;\n    }\n\n    // Function to fetch all posts\n    export const fetchPosts = async (): Promise<PostData[]> => {\n        const response = await api.get<{ data: PostData[] }>('/posts');\n        return response.data.data;\n    };\n\n    // Function to create a new post\n    export const createPost = async (postData: CreatePostInput): Promise<PostData> => {\n        try {\n            const response = await api.post<{ data: PostData }>('/post', postData);\n            return response.data.data;\n        } catch (error) {\n            console.error(\"Failed to create a post:\", error);\n            throw error;\n        }\n    };\n    // Function to create a new comment\n    export const createComment = async (commentData: CreateCommentInput): Promise<CommentData> => {\n        try {\n            const response = await api.post<{ data: CommentData }>('/post/comment', commentData);\n            return response.data.data;\n        } catch (error) {\n            console.error(\"Failed to create a comment:\", error);\n            throw error;\n        }\n    };\n\n\n    // Function to fetch the vote count for a specific post\n    export const fetchPostVotes = async (postId: string): Promise<number> => {\n        try {\n            const response = await api.get<VoteResponse>(`/post/${postId}/votes`);\n            if (response.data.success) {\n                return response.data.netVotes!;\n            } else {\n                throw new Error('API response was not successful: ' + response.data.message);\n            }\n        } catch (error) {\n            console.error(`Failed to fetch votes for post ${postId}:`, error);\n            throw error;\n        }\n    };\n\n    // Function to fetch the number of comments for a specific post\n    export const fetchCommentsCount = async (postId: string): Promise<number> => {\n        try {\n            const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n            if (response.data.success) {\n                return response.data.count;\n            } else {\n                throw new Error('API response was not successful');\n            }\n        } catch (error) {\n            console.error(`Failed to fetch comments count for post ${postId}:`, error);\n            throw error;\n        }\n    };\n\n    // Function to upvote a post\n    export const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n        try {\n            const response = await api.post<VoteResponse>('/post/upvote', payload);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to upvote post:\", error);\n            throw error;\n        }\n    };\n\n    // Function to downvote a post\n    export const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n        try {\n            const response = await api.post<VoteResponse>('/post/downvote', payload);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to downvote post:\", error);\n            throw error;\n        }\n    };\n\n    // Function to undo a vote on a post\n    export const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n        try {\n            const response = await api.post<VoteResponse>('/post/undovote', payload);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to undo vote:\", error);\n            throw error;\n        }\n    };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}