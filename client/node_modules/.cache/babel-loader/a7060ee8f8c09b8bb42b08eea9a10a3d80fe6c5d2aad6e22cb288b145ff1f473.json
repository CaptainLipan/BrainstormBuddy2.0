{"ast":null,"code":"// api.ts\nimport axios from 'axios';\nconst API_URL = 'http://localhost:4000/api'; // Base URL for API calls\n\n// Axios instance to set up a base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Define the interface for post data\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  try {\n    const response = await api.get('/posts');\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to fetch posts:\", error);\n    throw error;\n  }\n};\n\n// Function to create a new post\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData); // Adjusted to use the correct endpoint\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\n// Function to upvote a post\nexport const upvotePost = async (postId, userId) => {\n  try {\n    const response = await api.post('/post/upvote', {\n      postId,\n      userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\n\n// Function to downvote a post\nexport const downvotePost = async (postId, userId) => {\n  try {\n    const response = await api.post('/post/downvote', {\n      postId,\n      userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\n\n// Function to undo a vote on a post\nexport const undoVotePost = async (postId, userId) => {\n  try {\n    const response = await api.post('/post/undovote', {\n      postId,\n      userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","fetchPosts","response","get","data","error","console","createPost","postData","post","fetchPostVotes","postId","success","netVotes","Error","fetchCommentsCount","count","upvotePost","userId","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/api/api.ts"],"sourcesContent":["    // api.ts\n    import axios from 'axios';\n\n    const API_URL = 'http://localhost:4000/api'; // Base URL for API calls\n\n    // Axios instance to set up a base configuration\n    const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    // Define the interface for post data\n    interface PostData {\n        title: string;\n        text: string;\n        link?: string;\n        userId: string;\n    }\n\n    // Function to fetch all posts\n    export const fetchPosts = async () => {\n        try {\n            const response = await api.get('/posts');\n            return response.data.data;\n        } catch (error) {\n            console.error(\"Failed to fetch posts:\", error);\n            throw error;\n        }\n    };\n\n\n    // Function to create a new post\n    export const createPost = async (postData: PostData) => {\n        try {\n            const response = await api.post('/post', postData); // Adjusted to use the correct endpoint\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to create a post:\", error);\n            throw error;\n        }\n    };\n\n    // Function to fetch the vote count for a specific post\n    export const fetchPostVotes = async (postId: string) => {\n        try {\n            const response = await api.get(`/post/${postId}/votes`);\n            if (response.data.success) {\n                return response.data.netVotes;\n            } else {\n                throw new Error('API response was not successful');\n            }\n        } catch (error) {\n            console.error(`Failed to fetch votes for post ${postId}:`, error);\n            throw error;\n        }\n    };\n\n    // Function to fetch the number of comments for a specific post\n    export const fetchCommentsCount = async (postId: string) => {\n        try {\n            const response = await api.get(`/post/${postId}/comments/count`);\n            if (response.data.success) {\n                return response.data.count;\n            } else {\n                throw new Error('API response was not successful');\n            }\n        } catch (error) {\n            console.error(`Failed to fetch comments count for post ${postId}:`, error);\n            throw error;\n        }\n    };\n    // Function to upvote a post\n    export const upvotePost = async (postId, userId) => {\n        try {\n            const response = await api.post('/post/upvote', { postId, userId });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to upvote post:\", error);\n            throw error;\n        }\n    };\n\n    // Function to downvote a post\n    export const downvotePost = async (postId, userId) => {\n        try {\n            const response = await api.post('/post/downvote', { postId, userId });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to downvote post:\", error);\n            throw error;\n        }\n    };\n\n    // Function to undo a vote on a post\n    export const undoVotePost = async (postId, userId) => {\n        try {\n            const response = await api.post('/post/undovote', { postId, userId });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to undo vote:\", error);\n            throw error;\n        }\n    };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}