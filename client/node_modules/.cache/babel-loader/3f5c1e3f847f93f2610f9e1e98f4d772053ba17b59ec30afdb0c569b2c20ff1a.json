{"ast":null,"code":"// src/api/api.ts\nimport axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const toggleVote = async (type, id, voteType, userId) => {\n  return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, {\n    userId\n  });\n};\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data.data;\n};\n\n// Function to fetch a post by ID\nexport const fetchPostById = async postId => {\n  const response = await api.get(`/post/${postId}`);\n  return response.data.data;\n};\n\n// Function to create a new post\nexport const createPost = async postData => {\n  const response = await api.post('/post', postData);\n  return response.data.data;\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async postId => {\n  const response = await api.get(`${API_URL}/post/${postId}/comments`);\n  return response.data.comments;\n};\n\n// Function to post a comment\nexport const postComment = async commentData => {\n  try {\n    const response = await api.post(`${API_URL}/comment`, commentData);\n    return response.data.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  const response = await api.get(`/post/${postId}/votes`);\n  if (response.data.success) {\n    return response.data.netVotes;\n  } else {\n    throw new Error('API response was not successful');\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  const response = await api.get(`/post/${postId}/comments/count`);\n  if (response.data.success) {\n    return response.data.count;\n  } else {\n    throw new Error('API response was not successful');\n  }\n};\n\n// Voting functions\n\nexport const upvotePost = async payload => {\n  const response = await api.post('/post/upvote', payload);\n  return response.data;\n};\nexport const downvotePost = async payload => {\n  const response = await api.post('/post/downvote', payload);\n  return response.data;\n};\nexport const undoVotePost = async payload => {\n  const response = await api.post('/post/undovote', payload);\n  return response.data;\n};\n\n// Function to delete a post\nexport const deletePost = async postId => {\n  await api.delete(`/post/${postId}`);\n};\n\n// Function to delete a comment\nexport const deleteComment = async commentId => {\n  await api.delete(`/comment/${commentId}`);\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","toggleVote","type","id","voteType","userId","post","fetchPosts","response","get","data","fetchPostById","postId","createPost","postData","getCommentsForPost","comments","postComment","commentData","error","fetchPostVotes","success","netVotes","Error","fetchCommentsCount","count","upvotePost","payload","downvotePost","undoVotePost","deletePost","delete","deleteComment","commentId"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy3.0/client/src/api/api.ts"],"sourcesContent":["// src/api/api.ts\nimport axios from 'axios';\nimport { PostWithCommentsCount, CreatePostInput } from '../models/post/PostModel';\nimport { CommentData, CreateCommentInput } from '../models/comment/CommentModel';\n\nconst API_URL = 'http://localhost:4000/api';\n\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nexport const toggleVote = async (type: string, id: string, voteType: 'upvote' | 'downvote', userId: string): Promise<any> => {\n    return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, { userId });\n};\n\n// Function to fetch all posts\nexport const fetchPosts = async (): Promise<PostWithCommentsCount[]> => {\n    const response = await api.get<{ data: PostWithCommentsCount[] }>('/posts');\n    return response.data.data;\n};\n\n// Function to fetch a post by ID\nexport const fetchPostById = async (postId: string): Promise<PostWithCommentsCount> => {\n    const response = await api.get<{ data: PostWithCommentsCount }>(`/post/${postId}`);\n    return response.data.data;\n};\n\n// Function to create a new post\nexport const createPost = async (postData: CreatePostInput): Promise<PostWithCommentsCount> => {\n    const response = await api.post<{ data: PostWithCommentsCount }>('/post', postData);\n    return response.data.data;\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async (postId: string): Promise<CommentData[]> => {\n    const response = await api.get<{ comments: CommentData[] }>(`${API_URL}/post/${postId}/comments`);\n    return response.data.comments;\n};\n\n// Function to post a comment\nexport const postComment = async (commentData: CreateCommentInput): Promise<CommentData> => {\n    try {\n        const response = await api.post<{ data: CommentData }>(`${API_URL}/comment`, commentData);\n        return response.data.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async (postId: string): Promise<number> => {\n    const response = await api.get<{ success: boolean; netVotes: number }>(`/post/${postId}/votes`);\n    if (response.data.success) {\n        return response.data.netVotes;\n    } else {\n        throw new Error('API response was not successful');\n    }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async (postId: string): Promise<number> => {\n    const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n        return response.data.count;\n    } else {\n        throw new Error('API response was not successful');\n    }\n};\n\n// Voting functions\ninterface VotePayload {\n    postId: string;\n    userId: string;\n}\n\ninterface VoteResponse {\n    success: boolean;\n    netVotes?: number;\n    message?: string;\n}\n\nexport const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    const response = await api.post<VoteResponse>('/post/upvote', payload);\n    return response.data;\n};\n\nexport const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    const response = await api.post<VoteResponse>('/post/downvote', payload);\n    return response.data;\n};\n\nexport const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    const response = await api.post<VoteResponse>('/post/undovote', payload);\n    return response.data;\n};\n\n// Function to delete a post\nexport const deletePost = async (postId: string): Promise<void> => {\n    await api.delete(`/post/${postId}`);\n};\n\n// Function to delete a comment\nexport const deleteComment = async (commentId: string): Promise<void> => {\n    await api.delete(`/comment/${commentId}`);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}