{"ast":null,"code":"import { toggleVote } from '../../../api/api';\nexport const handleVote = async (posts, setPosts, postId, type) => {\n  const userString = localStorage.getItem('user');\n  if (!userString) {\n    alert(\"You need to be logged in to vote.\");\n    return;\n  }\n  const user = JSON.parse(userString);\n  const userId = user._id;\n  const postIndex = posts.findIndex(post => post._id === postId);\n  if (postIndex === -1) {\n    alert(\"Post not found.\");\n    return;\n  }\n  let currentPost = posts[postIndex];\n  try {\n    const response = await toggleVote('post', postId, type, userId);\n    if (response.data.success) {\n      var _response$data$netVot;\n      currentPost.upvotes = (_response$data$netVot = response.data.netVotes) !== null && _response$data$netVot !== void 0 ? _response$data$netVot : currentPost.upvotes;\n      posts[postIndex] = currentPost;\n      setPosts([...posts]);\n      window.location.reload(); // Force page refresh\n    } else {\n      alert(response.data.message);\n    }\n  } catch (error) {\n    alert(\"Failed to execute vote operation: \" + error.message);\n  }\n};","map":{"version":3,"names":["toggleVote","handleVote","posts","setPosts","postId","type","userString","localStorage","getItem","alert","user","JSON","parse","userId","_id","postIndex","findIndex","post","currentPost","response","data","success","_response$data$netVot","upvotes","netVotes","window","location","reload","message","error"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/components/mainbar/posts/handleVote.ts"],"sourcesContent":["import { toggleVote } from '../../../api/api';\nimport { Post } from '../../../models/post/PostModel';\n\nexport const handleVote = async (\n    posts: Post[],\n    setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n    postId: string,\n    type: 'upvote' | 'downvote',\n): Promise<void> => {\n    const userString = localStorage.getItem('user');\n    if (!userString) {\n        alert(\"You need to be logged in to vote.\");\n        return;\n    }\n    const user = JSON.parse(userString);\n\n    const userId = user._id;\n    const postIndex = posts.findIndex(post => post._id === postId);\n    if (postIndex === -1) {\n        alert(\"Post not found.\");\n        return;\n    }\n\n    let currentPost = posts[postIndex];\n    try {\n        const response = await toggleVote('post', postId, type, userId);\n\n        if (response.data.success) {\n            currentPost.upvotes = response.data.netVotes ?? currentPost.upvotes;\n            posts[postIndex] = currentPost;\n            setPosts([...posts]);\n            window.location.reload();  // Force page refresh\n        } else {\n            alert(response.data.message);\n        }\n    } catch (error: any) {\n        alert(\"Failed to execute vote operation: \" + error.message);\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAG7C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CACtBC,KAAa,EACbC,QAAsD,EACtDC,MAAc,EACdC,IAA2B,KACX;EAChB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC/C,IAAI,CAACF,UAAU,EAAE;IACbG,KAAK,CAAC,mCAAmC,CAAC;IAC1C;EACJ;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;EAEnC,MAAMO,MAAM,GAAGH,IAAI,CAACI,GAAG;EACvB,MAAMC,SAAS,GAAGb,KAAK,CAACc,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKV,MAAM,CAAC;EAC9D,IAAIW,SAAS,KAAK,CAAC,CAAC,EAAE;IAClBN,KAAK,CAAC,iBAAiB,CAAC;IACxB;EACJ;EAEA,IAAIS,WAAW,GAAGhB,KAAK,CAACa,SAAS,CAAC;EAClC,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMnB,UAAU,CAAC,MAAM,EAAEI,MAAM,EAAEC,IAAI,EAAEQ,MAAM,CAAC;IAE/D,IAAIM,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;MAAA,IAAAC,qBAAA;MACvBJ,WAAW,CAACK,OAAO,IAAAD,qBAAA,GAAGH,QAAQ,CAACC,IAAI,CAACI,QAAQ,cAAAF,qBAAA,cAAAA,qBAAA,GAAIJ,WAAW,CAACK,OAAO;MACnErB,KAAK,CAACa,SAAS,CAAC,GAAGG,WAAW;MAC9Bf,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;MACpBuB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAE;IAC/B,CAAC,MAAM;MACHlB,KAAK,CAACU,QAAQ,CAACC,IAAI,CAACQ,OAAO,CAAC;IAChC;EACJ,CAAC,CAAC,OAAOC,KAAU,EAAE;IACjBpB,KAAK,CAAC,oCAAoC,GAAGoB,KAAK,CAACD,OAAO,CAAC;EAC/D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}