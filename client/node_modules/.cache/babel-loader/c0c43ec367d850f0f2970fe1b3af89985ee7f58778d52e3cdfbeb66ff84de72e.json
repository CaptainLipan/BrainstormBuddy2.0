{"ast":null,"code":"import { upvotePost, downvotePost, undoVotePost } from '../../../api/api';\n// Import the Post interface\n\nexport const handleVote = async (posts, setPosts, postId, type, userId) => {\n  const postIndex = posts.findIndex(post => post._id === postId);\n  if (postIndex === -1) return;\n  let updatedPosts = [...posts];\n  let currentPost = updatedPosts[postIndex];\n\n  // Prepare a default response object in case no API call is made\n  let response = {\n    success: false,\n    message: \"Invalid vote operation\"\n  };\n  if (type === 'upvote' && !currentPost.upvoted) {\n    response = await upvotePost({\n      postId,\n      userId\n    });\n  } else if (type === 'downvote' && !currentPost.downvoted) {\n    response = await downvotePost({\n      postId,\n      userId\n    });\n  } else if (type === 'undo') {\n    response = await undoVotePost({\n      postId,\n      userId\n    });\n  }\n  if (response.success) {\n    if (type === 'upvote' && !currentPost.upvoted) {\n      currentPost.upvotes += currentPost.downvoted ? 2 : 1;\n      currentPost.upvoted = true;\n      currentPost.downvoted = false;\n    } else if (type === 'downvote' && !currentPost.downvoted) {\n      currentPost.upvotes -= currentPost.upvoted ? 2 : 1;\n      currentPost.downvoted = true;\n      currentPost.upvoted = false;\n    } else if (type === 'undo') {\n      if (currentPost.upvoted) currentPost.upvotes -= 1;\n      if (currentPost.downvoted) currentPost.upvotes += 1;\n      currentPost.upvoted = false;\n      currentPost.downvoted = false;\n    }\n\n    // Update the posts array with the modified post\n    updatedPosts[postIndex] = currentPost;\n    setPosts(updatedPosts);\n  } else {\n    console.error(response.message);\n  }\n};","map":{"version":3,"names":["upvotePost","downvotePost","undoVotePost","handleVote","posts","setPosts","postId","type","userId","postIndex","findIndex","post","_id","updatedPosts","currentPost","response","success","message","upvoted","downvoted","upvotes","console","error"],"sources":["/Users/honzik/WebstormProjects/untitled7/client/src/components/mainbar/posts/handleVote.ts"],"sourcesContent":["import React from 'react';\nimport { upvotePost, downvotePost, undoVotePost } from '../../../api/api';\nimport { Post } from '../../../models/post/PostModel'; // Import the Post interface\n\ntype VoteType = 'upvote' | 'downvote' | 'undo';\n\ninterface VoteResponse {\n    success: boolean;\n    message?: string;\n    netVotes?: number;\n}\n\nexport const handleVote = async (\n    posts: Post[],\n    setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n    postId: string,\n    type: VoteType,\n    userId: string\n): Promise<void> => {\n    const postIndex = posts.findIndex(post => post._id === postId);\n    if (postIndex === -1) return;\n\n    let updatedPosts = [...posts];\n    let currentPost = updatedPosts[postIndex];\n\n    // Prepare a default response object in case no API call is made\n    let response: VoteResponse = { success: false, message: \"Invalid vote operation\" };\n\n    if (type === 'upvote' && !currentPost.upvoted) {\n        response = await upvotePost({ postId, userId });\n    } else if (type === 'downvote' && !currentPost.downvoted) {\n        response = await downvotePost({ postId, userId });\n    } else if (type === 'undo') {\n        response = await undoVotePost({ postId, userId });\n    }\n\n    if (response.success) {\n        if (type === 'upvote' && !currentPost.upvoted) {\n            currentPost.upvotes += currentPost.downvoted ? 2 : 1;\n            currentPost.upvoted = true;\n            currentPost.downvoted = false;\n        } else if (type === 'downvote' && !currentPost.downvoted) {\n            currentPost.upvotes -= currentPost.upvoted ? 2 : 1;\n            currentPost.downvoted = true;\n            currentPost.upvoted = false;\n        } else if (type === 'undo') {\n            if (currentPost.upvoted) currentPost.upvotes -= 1;\n            if (currentPost.downvoted) currentPost.upvotes += 1;\n            currentPost.upvoted = false;\n            currentPost.downvoted = false;\n        }\n\n        // Update the posts array with the modified post\n        updatedPosts[postIndex] = currentPost;\n        setPosts(updatedPosts);\n    } else {\n        console.error(response.message);\n    }\n};\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,YAAY,EAAEC,YAAY,QAAQ,kBAAkB;AAClB;;AAUvD,OAAO,MAAMC,UAAU,GAAG,MAAAA,CACtBC,KAAa,EACbC,QAAsD,EACtDC,MAAc,EACdC,IAAc,EACdC,MAAc,KACE;EAChB,MAAMC,SAAS,GAAGL,KAAK,CAACM,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAAC;EAC9D,IAAIG,SAAS,KAAK,CAAC,CAAC,EAAE;EAEtB,IAAII,YAAY,GAAG,CAAC,GAAGT,KAAK,CAAC;EAC7B,IAAIU,WAAW,GAAGD,YAAY,CAACJ,SAAS,CAAC;;EAEzC;EACA,IAAIM,QAAsB,GAAG;IAAEC,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAyB,CAAC;EAElF,IAAIV,IAAI,KAAK,QAAQ,IAAI,CAACO,WAAW,CAACI,OAAO,EAAE;IAC3CH,QAAQ,GAAG,MAAMf,UAAU,CAAC;MAAEM,MAAM;MAAEE;IAAO,CAAC,CAAC;EACnD,CAAC,MAAM,IAAID,IAAI,KAAK,UAAU,IAAI,CAACO,WAAW,CAACK,SAAS,EAAE;IACtDJ,QAAQ,GAAG,MAAMd,YAAY,CAAC;MAAEK,MAAM;MAAEE;IAAO,CAAC,CAAC;EACrD,CAAC,MAAM,IAAID,IAAI,KAAK,MAAM,EAAE;IACxBQ,QAAQ,GAAG,MAAMb,YAAY,CAAC;MAAEI,MAAM;MAAEE;IAAO,CAAC,CAAC;EACrD;EAEA,IAAIO,QAAQ,CAACC,OAAO,EAAE;IAClB,IAAIT,IAAI,KAAK,QAAQ,IAAI,CAACO,WAAW,CAACI,OAAO,EAAE;MAC3CJ,WAAW,CAACM,OAAO,IAAIN,WAAW,CAACK,SAAS,GAAG,CAAC,GAAG,CAAC;MACpDL,WAAW,CAACI,OAAO,GAAG,IAAI;MAC1BJ,WAAW,CAACK,SAAS,GAAG,KAAK;IACjC,CAAC,MAAM,IAAIZ,IAAI,KAAK,UAAU,IAAI,CAACO,WAAW,CAACK,SAAS,EAAE;MACtDL,WAAW,CAACM,OAAO,IAAIN,WAAW,CAACI,OAAO,GAAG,CAAC,GAAG,CAAC;MAClDJ,WAAW,CAACK,SAAS,GAAG,IAAI;MAC5BL,WAAW,CAACI,OAAO,GAAG,KAAK;IAC/B,CAAC,MAAM,IAAIX,IAAI,KAAK,MAAM,EAAE;MACxB,IAAIO,WAAW,CAACI,OAAO,EAAEJ,WAAW,CAACM,OAAO,IAAI,CAAC;MACjD,IAAIN,WAAW,CAACK,SAAS,EAAEL,WAAW,CAACM,OAAO,IAAI,CAAC;MACnDN,WAAW,CAACI,OAAO,GAAG,KAAK;MAC3BJ,WAAW,CAACK,SAAS,GAAG,KAAK;IACjC;;IAEA;IACAN,YAAY,CAACJ,SAAS,CAAC,GAAGK,WAAW;IACrCT,QAAQ,CAACQ,YAAY,CAAC;EAC1B,CAAC,MAAM;IACHQ,OAAO,CAACC,KAAK,CAACP,QAAQ,CAACE,OAAO,CAAC;EACnC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}