{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:4000/api';\nexport const toggleVote = async (type, id, voteType, userId) => {\n  return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, {\n    userId\n  });\n};\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interface for data needed to create a post\n\n// Interface for the structure of a post as returned from the backend\n\n// Function to create a new post\nexport const createPost = async postData => {\n  try {\n    const response = await api.post('/post', postData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Failed to create a post:\", error);\n    throw error;\n  }\n};\n\n// Function to fetch all posts\nexport const fetchPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data.data;\n};\n\n// Function to fetch a post by ID\nexport const fetchPostById = async postId => {\n  const response = await api.get(`/post/${postId}`);\n  return response.data.data;\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async postId => {\n  try {\n    const response = await axios.get(`${API_URL}/post/${postId}/comments`);\n    return response.data.comments;\n  } catch (error) {\n    var _error$response;\n    if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n      return []; // Return an empty array if no comments are found\n    }\n    throw error;\n  }\n};\n\n// Function to post a comment\nexport const postComment = async commentData => {\n  try {\n    const response = await axios.post(`${API_URL}/comment`, commentData);\n    return response.data.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Interface for the voting functionality\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/votes`);\n    if (response.data.success) {\n      return response.data.netVotes;\n    } else {\n      throw new Error('API response was not successful: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`Failed to fetch votes for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async postId => {\n  try {\n    const response = await api.get(`/post/${postId}/comments/count`);\n    if (response.data.success) {\n      return response.data.count;\n    } else {\n      throw new Error('API response was not successful');\n    }\n  } catch (error) {\n    console.error(`Failed to fetch comments count for post ${postId}:`, error);\n    throw error;\n  }\n};\n\n// Voting functions\nexport const upvotePost = async payload => {\n  try {\n    const response = await api.post('/post/upvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to upvote post:\", error);\n    throw error;\n  }\n};\nexport const downvotePost = async payload => {\n  try {\n    const response = await api.post('/post/downvote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to downvote post:\", error);\n    throw error;\n  }\n};\nexport const undoVotePost = async payload => {\n  try {\n    const response = await api.post('/post/undovote', payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to undo vote:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","toggleVote","type","id","voteType","userId","post","api","create","baseURL","headers","createPost","postData","response","data","error","console","fetchPosts","get","fetchPostById","postId","getCommentsForPost","comments","_error$response","isAxiosError","status","postComment","commentData","fetchPostVotes","success","netVotes","Error","message","fetchCommentsCount","count","upvotePost","payload","downvotePost","undoVotePost"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/api/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Post } from '../models/post/PostModel';\nimport { CommentData, CreateCommentInput } from '../models/comment/CommentModel';\n\nconst API_URL = 'http://localhost:4000/api';\n\nexport const toggleVote = async (type: string, id: string, voteType: 'upvote' | 'downvote', userId: string): Promise<any> => {\n    return axios.post(`${API_URL}/vote/toggle/${type}/${id}/${voteType}`, { userId });\n};\n\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// Interface for data needed to create a post\ninterface CreatePostInput {\n    title: string;\n    text: string;\n    link?: string;\n    userId: string;  // User ID should be supplied from the client\n}\n\n// Interface for the structure of a post as returned from the backend\ninterface PostData {\n    _id: string;\n    title: string;\n    text: string;\n    link?: string;\n    userId: string;\n    _creator: {\n        username: string;\n    };\n    createdAt: string;\n    updatedAt?: string;\n    _comments: CommentData[];\n    upvotes: number;\n    upvoted?: boolean;\n    downvoted?: boolean;\n    showComments?: boolean;\n    commentsCount: number;\n}\n\n// Function to create a new post\nexport const createPost = async (postData: CreatePostInput): Promise<PostData> => {\n    try {\n        const response = await api.post<{ data: PostData }>('/post', postData);\n        return response.data.data;\n    } catch (error) {\n        console.error(\"Failed to create a post:\", error);\n        throw error;\n    }\n};\n\n// Function to fetch all posts\nexport const fetchPosts = async (): Promise<PostData[]> => {\n    const response = await api.get<{ data: PostData[] }>('/posts');\n    return response.data.data;\n};\n\n// Function to fetch a post by ID\nexport const fetchPostById = async (postId: string): Promise<PostData> => {\n    const response = await api.get<{ data: PostData }>(`/post/${postId}`);\n    return response.data.data;\n};\n\n// Function to get comments for a post\nexport const getCommentsForPost = async (postId: string): Promise<CommentData[]> => {\n    try {\n        const response = await axios.get<{ comments: CommentData[] }>(`${API_URL}/post/${postId}/comments`);\n        return response.data.comments;\n    } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 404) {\n            return []; // Return an empty array if no comments are found\n        }\n        throw error;\n    }\n};\n\n// Function to post a comment\nexport const postComment = async (commentData: CreateCommentInput): Promise<CommentData> => {\n    try {\n        const response = await axios.post<{ data: CommentData }>(`${API_URL}/comment`, commentData);\n        return response.data.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// Interface for the voting functionality\ninterface VotePayload {\n    postId: string;\n    userId: string;\n}\n\ninterface VoteResponse {\n    success: boolean;\n    netVotes?: number;\n    message?: string;\n}\n\n// Function to fetch the vote count for a specific post\nexport const fetchPostVotes = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<VoteResponse>(`/post/${postId}/votes`);\n        if (response.data.success) {\n            return response.data.netVotes!;\n        } else {\n            throw new Error('API response was not successful: ' + response.data.message);\n        }\n    } catch (error) {\n        console.error(`Failed to fetch votes for post ${postId}:`, error);\n        throw error;\n    }\n};\n\n// Function to fetch the number of comments for a specific post\nexport const fetchCommentsCount = async (postId: string): Promise<number> => {\n    try {\n        const response = await api.get<{ success: boolean; count: number }>(`/post/${postId}/comments/count`);\n        if (response.data.success) {\n            return response.data.count;\n        } else {\n            throw new Error('API response was not successful');\n        }\n    } catch (error) {\n        console.error(`Failed to fetch comments count for post ${postId}:`, error);\n        throw error;\n    }\n};\n\n// Voting functions\nexport const upvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/upvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to upvote post:\", error);\n        throw error;\n    }\n};\n\nexport const downvotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/downvote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to downvote post:\", error);\n        throw error;\n    }\n};\n\nexport const undoVotePost = async (payload: VotePayload): Promise<VoteResponse> => {\n    try {\n        const response = await api.post<VoteResponse>('/post/undovote', payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Failed to undo vote:\", error);\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}