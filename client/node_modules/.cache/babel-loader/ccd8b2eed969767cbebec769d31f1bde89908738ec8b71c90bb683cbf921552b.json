{"ast":null,"code":"// src/components/mainbar/comments/handleCommentVote.ts\nimport { toggleVote } from '../../../api/api';\nexport const handleCommentVote = async (comment, setComment, type) => {\n  const userString = localStorage.getItem('user');\n  if (!userString) {\n    alert(\"You need to be logged in to vote.\");\n    return;\n  }\n  const user = JSON.parse(userString);\n  const userId = user._id;\n  try {\n    const response = await toggleVote('comment', comment._id, type, userId);\n    if (response.data.success) {\n      var _response$data$netVot, _response$data$upvote, _response$data$downvo;\n      const updatedComment = {\n        ...comment,\n        upvotes: (_response$data$netVot = response.data.netVotes) !== null && _response$data$netVot !== void 0 ? _response$data$netVot : comment.upvotes,\n        upvoted: (_response$data$upvote = response.data.upvoted) !== null && _response$data$upvote !== void 0 ? _response$data$upvote : false,\n        downvoted: (_response$data$downvo = response.data.downvoted) !== null && _response$data$downvo !== void 0 ? _response$data$downvo : false\n      };\n      setComment(updatedComment);\n    } else {\n      alert(response.data.message);\n    }\n  } catch (error) {\n    alert(\"Failed to execute vote operation: \" + error.message);\n  }\n};","map":{"version":3,"names":["toggleVote","handleCommentVote","comment","setComment","type","userString","localStorage","getItem","alert","user","JSON","parse","userId","_id","response","data","success","_response$data$netVot","_response$data$upvote","_response$data$downvo","updatedComment","upvotes","netVotes","upvoted","downvoted","message","error"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/handleCommentVote.ts"],"sourcesContent":["// src/components/mainbar/comments/handleCommentVote.ts\nimport { toggleVote } from '../../../api/api';\nimport { CommentData } from '../../../models/comment/CommentModel';\n\nexport const handleCommentVote = async (\n    comment: CommentData,\n    setComment: React.Dispatch<React.SetStateAction<CommentData>>,\n    type: 'upvote' | 'downvote',\n): Promise<void> => {\n    const userString = localStorage.getItem('user');\n    if (!userString) {\n        alert(\"You need to be logged in to vote.\");\n        return;\n    }\n    const user = JSON.parse(userString);\n\n    const userId = user._id;\n    try {\n        const response = await toggleVote('comment', comment._id, type, userId);\n\n        if (response.data.success) {\n            const updatedComment = {\n                ...comment,\n                upvotes: response.data.netVotes ?? comment.upvotes,\n                upvoted: response.data.upvoted ?? false,\n                downvoted: response.data.downvoted ?? false\n            };\n            setComment(updatedComment);\n        } else {\n            alert(response.data.message);\n        }\n    } catch (error: any) {\n        alert(\"Failed to execute vote operation: \" + error.message);\n    }\n};\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,kBAAkB;AAG7C,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAC7BC,OAAoB,EACpBC,UAA6D,EAC7DC,IAA2B,KACX;EAChB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC/C,IAAI,CAACF,UAAU,EAAE;IACbG,KAAK,CAAC,mCAAmC,CAAC;IAC1C;EACJ;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;EAEnC,MAAMO,MAAM,GAAGH,IAAI,CAACI,GAAG;EACvB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMd,UAAU,CAAC,SAAS,EAAEE,OAAO,CAACW,GAAG,EAAET,IAAI,EAAEQ,MAAM,CAAC;IAEvE,IAAIE,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;MAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MACvB,MAAMC,cAAc,GAAG;QACnB,GAAGlB,OAAO;QACVmB,OAAO,GAAAJ,qBAAA,GAAEH,QAAQ,CAACC,IAAI,CAACO,QAAQ,cAAAL,qBAAA,cAAAA,qBAAA,GAAIf,OAAO,CAACmB,OAAO;QAClDE,OAAO,GAAAL,qBAAA,GAAEJ,QAAQ,CAACC,IAAI,CAACQ,OAAO,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,KAAK;QACvCM,SAAS,GAAAL,qBAAA,GAAEL,QAAQ,CAACC,IAAI,CAACS,SAAS,cAAAL,qBAAA,cAAAA,qBAAA,GAAI;MAC1C,CAAC;MACDhB,UAAU,CAACiB,cAAc,CAAC;IAC9B,CAAC,MAAM;MACHZ,KAAK,CAACM,QAAQ,CAACC,IAAI,CAACU,OAAO,CAAC;IAChC;EACJ,CAAC,CAAC,OAAOC,KAAU,EAAE;IACjBlB,KAAK,CAAC,oCAAoC,GAAGkB,KAAK,CAACD,OAAO,CAAC;EAC/D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}