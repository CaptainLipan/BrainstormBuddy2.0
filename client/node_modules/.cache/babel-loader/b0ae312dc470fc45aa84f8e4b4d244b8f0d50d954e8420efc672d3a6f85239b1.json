{"ast":null,"code":"var _jsxFileName = \"/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx\",\n  _s = $RefreshSig$();\n// src/components/mainbar/comments/CommentsSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport Comment from './Comment';\nimport './Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  postId,\n  onCommentAdded,\n  incrementCommentCount\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const userId = JSON.parse(localStorage.getItem('user') || '{}')._id;\n  useEffect(() => {\n    const fetchComments = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const fetchedComments = await getCommentsForPost(postId, userId);\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error('Failed to load comments', error);\n        setError('Failed to fetch comments. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchComments();\n  }, [postId, userId]);\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!newComment.trim()) return;\n    const userInfo = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n    if (!userInfo || userInfo._id !== userId) {\n      setError('You are not authorized to post.');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    const commentData = {\n      text: newComment,\n      postId,\n      userId: userInfo._id\n    };\n    try {\n      const comment = await postComment(commentData);\n      setComments([...comments, comment]);\n      setNewComment('');\n      incrementCommentCount(); // Increment the comment count locally\n      onCommentAdded(); // Call the onCommentAdded prop\n    } catch (error) {\n      console.error('Failed to post comment:', error);\n      setError(`Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comments-form\",\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment...\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Posting...' : 'Post Comment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment\n    }, comment._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsSection, \"JN9n8hBDwI20kp/892nCsn967+g=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","getCommentsForPost","postComment","Comment","jsxDEV","_jsxDEV","CommentsSection","postId","onCommentAdded","incrementCommentCount","_s","comments","setComments","newComment","setNewComment","isLoading","setIsLoading","error","setError","userId","JSON","parse","localStorage","getItem","_id","fetchComments","fetchedComments","console","handleCommentSubmit","event","preventDefault","trim","userInfo","commentData","text","comment","Error","message","String","className","children","onSubmit","placeholder","value","onChange","e","target","disabled","fileName","_jsxFileName","lineNumber","columnNumber","type","map","_c","$RefreshReg$"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx"],"sourcesContent":["// src/components/mainbar/comments/CommentsSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport { CommentData, CreateCommentInput } from '../../../models/comment/CommentModel';\nimport Comment from './Comment';\nimport './Comment.css';\n\ninterface CommentsSectionProps {\n    postId: string;\n    onCommentAdded: () => void;\n    incrementCommentCount: () => void;\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ postId, onCommentAdded, incrementCommentCount }) => {\n    const [comments, setComments] = useState<CommentData[]>([]);\n    const [newComment, setNewComment] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const userId = JSON.parse(localStorage.getItem('user') || '{}')._id;\n\n    useEffect(() => {\n        const fetchComments = async () => {\n            setIsLoading(true);\n            setError(null);\n\n            try {\n                const fetchedComments = await getCommentsForPost(postId, userId);\n                setComments(fetchedComments);\n            } catch (error) {\n                console.error('Failed to load comments', error);\n                setError('Failed to fetch comments. Please try again later.');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchComments();\n    }, [postId, userId]);\n\n    const handleCommentSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (!newComment.trim()) return;\n\n        const userInfo = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')!) : null;\n        if (!userInfo || userInfo._id !== userId) {\n            setError('You are not authorized to post.');\n            return;\n        }\n\n        setIsLoading(true);\n        setError(null);\n\n        const commentData: CreateCommentInput = {\n            text: newComment,\n            postId,\n            userId: userInfo._id,\n        };\n\n        try {\n            const comment = await postComment(commentData);\n            setComments([...comments, comment]);\n            setNewComment('');\n            incrementCommentCount(); // Increment the comment count locally\n            onCommentAdded(); // Call the onCommentAdded prop\n        } catch (error) {\n            console.error('Failed to post comment:', error);\n            setError(`Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"comments-section\">\n            <form className=\"comments-form\" onSubmit={handleCommentSubmit}>\n                <textarea\n                    placeholder=\"Add a comment...\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    disabled={isLoading}\n                />\n                <button type=\"submit\" disabled={isLoading}>\n                    {isLoading ? 'Posting...' : 'Post Comment'}\n                </button>\n            </form>\n            {error && <div className=\"error-message\">{error}</div>}\n            {isLoading ? (\n                <div className=\"loading-message\">Loading comments...</div>\n            ) : (\n                comments.map((comment) => (\n                    <Comment key={comment._id} comment={comment} />\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default CommentsSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}