{"ast":null,"code":"var _jsxFileName = \"/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx\",\n  _s = $RefreshSig$();\n// CommentSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport Comment from './Comment';\nimport './Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  postId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = \"user-id\"; // This should be dynamically set based on logged-in user\n\n  useEffect(() => {\n    loadComments();\n  }, [postId]);\n  const loadComments = async () => {\n    try {\n      const fetchedComments = await getCommentsForPost(postId);\n      setComments(fetchedComments);\n    } catch (error) {\n      console.error('Failed to load comments', error);\n    }\n  };\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (newComment.trim()) {\n      try {\n        const comment = await postComment(newComment, postId, userId);\n        setComments([...comments, comment]);\n        setNewComment('');\n      } catch (error) {\n        console.error('Failed to post comment', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comments-form\",\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment...\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment\n    }, comment._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","getCommentsForPost","postComment","Comment","jsxDEV","_jsxDEV","CommentsSection","postId","_s","comments","setComments","newComment","setNewComment","userId","loadComments","fetchedComments","error","console","handleCommentSubmit","event","preventDefault","trim","comment","className","children","onSubmit","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","type","map","_id","_c","$RefreshReg$"],"sources":["/Users/honzik/WebstormProjects/BrainstormBuddy2.0/client/src/components/mainbar/comments/CommentsSection.tsx"],"sourcesContent":["// CommentSection.tsx\nimport React, { useState, useEffect } from 'react';\nimport { getCommentsForPost, postComment } from '../../../api/api';\nimport Comment from './Comment';\nimport { IComment } from '../../../models/comment/CommentModel';\nimport './Comment.css';\n\ninterface CommentsSectionProps {\n    postId: string;\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ postId }) => {\n    const [comments, setComments] = useState<IComment[]>([]);\n    const [newComment, setNewComment] = useState('');\n    const userId = \"user-id\"; // This should be dynamically set based on logged-in user\n\n    useEffect(() => {\n        loadComments();\n    }, [postId]);\n\n    const loadComments = async () => {\n        try {\n            const fetchedComments = await getCommentsForPost(postId);\n            setComments(fetchedComments);\n        } catch (error) {\n            console.error('Failed to load comments', error);\n        }\n    };\n\n    const handleCommentSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        if (newComment.trim()) {\n            try {\n                const comment = await postComment(newComment, postId, userId);\n                setComments([...comments, comment]);\n                setNewComment('');\n            } catch (error) {\n                console.error('Failed to post comment', error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"comments-section\">\n            <form className=\"comments-form\" onSubmit={handleCommentSubmit}>\n                <textarea\n                    placeholder=\"Add a comment...\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                />\n                <button type=\"submit\">Post Comment</button>\n            </form>\n            {comments.map(comment => (\n                <Comment key={comment._id} comment={comment} />\n            ))}\n        </div>\n    );\n};\n\nexport default CommentsSection;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,kBAAkB;AAClE,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvB,MAAMC,eAA+C,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAa,EAAE,CAAC;EACxD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMc,MAAM,GAAG,SAAS,CAAC,CAAC;;EAE1Bb,SAAS,CAAC,MAAM;IACZc,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,eAAe,GAAG,MAAMd,kBAAkB,CAACM,MAAM,CAAC;MACxDG,WAAW,CAACK,eAAe,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAOC,KAAsB,IAAK;IAC1DA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAIT,UAAU,CAACU,IAAI,CAAC,CAAC,EAAE;MACnB,IAAI;QACA,MAAMC,OAAO,GAAG,MAAMpB,WAAW,CAACS,UAAU,EAAEJ,MAAM,EAAEM,MAAM,CAAC;QAC7DH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEa,OAAO,CAAC,CAAC;QACnCV,aAAa,CAAC,EAAE,CAAC;MACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ;EACJ,CAAC;EAED,oBACIX,OAAA;IAAKkB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BnB,OAAA;MAAMkB,SAAS,EAAC,eAAe;MAACE,QAAQ,EAAEP,mBAAoB;MAAAM,QAAA,gBAC1DnB,OAAA;QACIqB,WAAW,EAAC,kBAAkB;QAC9BC,KAAK,EAAEhB,UAAW;QAClBiB,QAAQ,EAAGC,CAAC,IAAKjB,aAAa,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACF7B,OAAA;QAAQ8B,IAAI,EAAC,QAAQ;QAAAX,QAAA,EAAC;MAAY;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,EACNzB,QAAQ,CAAC2B,GAAG,CAACd,OAAO,iBACjBjB,OAAA,CAACF,OAAO;MAAmBmB,OAAO,EAAEA;IAAQ,GAA9BA,OAAO,CAACe,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA9CIF,eAA+C;AAAAgC,EAAA,GAA/ChC,eAA+C;AAgDrD,eAAeA,eAAe;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}